// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/netcode.proto
// </auto-generated>
// Original file comments:
// Author: Martin Wistauder
// Version: 1.2
// Date: 21.09.2020
//
// Server Address: 	gameserver.ist.tugraz.at
// Port: 			80
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DominectClient {
  public static partial class GameCom
  {
    static readonly string __ServiceName = "netcode.GameCom";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::DominectClient.MatchRequest> __Marshaller_netcode_MatchRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.MatchRequest.Parser));
    static readonly grpc::Marshaller<global::DominectClient.MatchResponse> __Marshaller_netcode_MatchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.MatchResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.TurnRequest> __Marshaller_netcode_TurnRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.TurnRequest.Parser));
    static readonly grpc::Marshaller<global::DominectClient.TurnResponse> __Marshaller_netcode_TurnResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.TurnResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.MatchIDPacket> __Marshaller_netcode_MatchIDPacket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.MatchIDPacket.Parser));
    static readonly grpc::Marshaller<global::DominectClient.GameStateResponse> __Marshaller_netcode_GameStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.GameStateResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.GetTimeoutResponse> __Marshaller_netcode_GetTimeoutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.GetTimeoutResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.OpponentInfoResponse> __Marshaller_netcode_OpponentInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.OpponentInfoResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.Nothing> __Marshaller_netcode_Nothing = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.Nothing.Parser));
    static readonly grpc::Marshaller<global::DominectClient.UserRegistrationRequest> __Marshaller_netcode_UserRegistrationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.UserRegistrationRequest.Parser));
    static readonly grpc::Marshaller<global::DominectClient.UserRegistrationResponse> __Marshaller_netcode_UserRegistrationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.UserRegistrationResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.GroupRegistrationRequest> __Marshaller_netcode_GroupRegistrationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.GroupRegistrationRequest.Parser));
    static readonly grpc::Marshaller<global::DominectClient.GroupRegistrationResponse> __Marshaller_netcode_GroupRegistrationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.GroupRegistrationResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.SetPseudonymRequest> __Marshaller_netcode_SetPseudonymRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.SetPseudonymRequest.Parser));
    static readonly grpc::Marshaller<global::DominectClient.SetPseudonymResponse> __Marshaller_netcode_SetPseudonymResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.SetPseudonymResponse.Parser));
    static readonly grpc::Marshaller<global::DominectClient.AuthPacket> __Marshaller_netcode_AuthPacket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.AuthPacket.Parser));
    static readonly grpc::Marshaller<global::DominectClient.GetUserTokenResponse> __Marshaller_netcode_GetUserTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DominectClient.GetUserTokenResponse.Parser));

    static readonly grpc::Method<global::DominectClient.MatchRequest, global::DominectClient.MatchResponse> __Method_NewMatch = new grpc::Method<global::DominectClient.MatchRequest, global::DominectClient.MatchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewMatch",
        __Marshaller_netcode_MatchRequest,
        __Marshaller_netcode_MatchResponse);

    static readonly grpc::Method<global::DominectClient.TurnRequest, global::DominectClient.TurnResponse> __Method_SubmitTurn = new grpc::Method<global::DominectClient.TurnRequest, global::DominectClient.TurnResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitTurn",
        __Marshaller_netcode_TurnRequest,
        __Marshaller_netcode_TurnResponse);

    static readonly grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.GameStateResponse> __Method_GetGameState = new grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameState",
        __Marshaller_netcode_MatchIDPacket,
        __Marshaller_netcode_GameStateResponse);

    static readonly grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.GetTimeoutResponse> __Method_GetTimeout = new grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.GetTimeoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTimeout",
        __Marshaller_netcode_MatchIDPacket,
        __Marshaller_netcode_GetTimeoutResponse);

    static readonly grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.OpponentInfoResponse> __Method_GetOpponentInfo = new grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.OpponentInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOpponentInfo",
        __Marshaller_netcode_MatchIDPacket,
        __Marshaller_netcode_OpponentInfoResponse);

    static readonly grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.Nothing> __Method_AbortMatch = new grpc::Method<global::DominectClient.MatchIDPacket, global::DominectClient.Nothing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AbortMatch",
        __Marshaller_netcode_MatchIDPacket,
        __Marshaller_netcode_Nothing);

    static readonly grpc::Method<global::DominectClient.UserRegistrationRequest, global::DominectClient.UserRegistrationResponse> __Method_UserRegistration = new grpc::Method<global::DominectClient.UserRegistrationRequest, global::DominectClient.UserRegistrationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserRegistration",
        __Marshaller_netcode_UserRegistrationRequest,
        __Marshaller_netcode_UserRegistrationResponse);

    static readonly grpc::Method<global::DominectClient.GroupRegistrationRequest, global::DominectClient.GroupRegistrationResponse> __Method_GroupRegistration = new grpc::Method<global::DominectClient.GroupRegistrationRequest, global::DominectClient.GroupRegistrationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GroupRegistration",
        __Marshaller_netcode_GroupRegistrationRequest,
        __Marshaller_netcode_GroupRegistrationResponse);

    static readonly grpc::Method<global::DominectClient.SetPseudonymRequest, global::DominectClient.SetPseudonymResponse> __Method_SetGroupPseudonym = new grpc::Method<global::DominectClient.SetPseudonymRequest, global::DominectClient.SetPseudonymResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetGroupPseudonym",
        __Marshaller_netcode_SetPseudonymRequest,
        __Marshaller_netcode_SetPseudonymResponse);

    static readonly grpc::Method<global::DominectClient.SetPseudonymRequest, global::DominectClient.SetPseudonymResponse> __Method_SetUserPseudonym = new grpc::Method<global::DominectClient.SetPseudonymRequest, global::DominectClient.SetPseudonymResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUserPseudonym",
        __Marshaller_netcode_SetPseudonymRequest,
        __Marshaller_netcode_SetPseudonymResponse);

    static readonly grpc::Method<global::DominectClient.AuthPacket, global::DominectClient.GetUserTokenResponse> __Method_GetUserToken = new grpc::Method<global::DominectClient.AuthPacket, global::DominectClient.GetUserTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserToken",
        __Marshaller_netcode_AuthPacket,
        __Marshaller_netcode_GetUserTokenResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DominectClient.NetcodeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for GameCom</summary>
    public partial class GameComClient : grpc::ClientBase<GameComClient>
    {
      /// <summary>Creates a new client for GameCom</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameComClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameCom that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameComClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameComClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameComClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Game-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.MatchResponse NewMatch(global::DominectClient.MatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Game-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.MatchResponse NewMatch(global::DominectClient.MatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewMatch, null, options, request);
      }
      /// <summary>
      /// Game-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.MatchResponse> NewMatchAsync(global::DominectClient.MatchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Game-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.MatchResponse> NewMatchAsync(global::DominectClient.MatchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewMatch, null, options, request);
      }
      public virtual global::DominectClient.TurnResponse SubmitTurn(global::DominectClient.TurnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTurn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.TurnResponse SubmitTurn(global::DominectClient.TurnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitTurn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.TurnResponse> SubmitTurnAsync(global::DominectClient.TurnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTurnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.TurnResponse> SubmitTurnAsync(global::DominectClient.TurnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitTurn, null, options, request);
      }
      public virtual global::DominectClient.GameStateResponse GetGameState(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.GameStateResponse GetGameState(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameState, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GameStateResponse> GetGameStateAsync(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GameStateResponse> GetGameStateAsync(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameState, null, options, request);
      }
      public virtual global::DominectClient.GetTimeoutResponse GetTimeout(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimeout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.GetTimeoutResponse GetTimeout(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTimeout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GetTimeoutResponse> GetTimeoutAsync(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTimeoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GetTimeoutResponse> GetTimeoutAsync(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTimeout, null, options, request);
      }
      public virtual global::DominectClient.OpponentInfoResponse GetOpponentInfo(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpponentInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.OpponentInfoResponse GetOpponentInfo(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOpponentInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.OpponentInfoResponse> GetOpponentInfoAsync(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOpponentInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.OpponentInfoResponse> GetOpponentInfoAsync(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOpponentInfo, null, options, request);
      }
      /// <summary>
      /// Disabled
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.Nothing AbortMatch(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbortMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disabled
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.Nothing AbortMatch(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AbortMatch, null, options, request);
      }
      /// <summary>
      /// Disabled
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.Nothing> AbortMatchAsync(global::DominectClient.MatchIDPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbortMatchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disabled
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.Nothing> AbortMatchAsync(global::DominectClient.MatchIDPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AbortMatch, null, options, request);
      }
      /// <summary>
      /// Organisation-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.UserRegistrationResponse UserRegistration(global::DominectClient.UserRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserRegistration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Organisation-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DominectClient.UserRegistrationResponse UserRegistration(global::DominectClient.UserRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserRegistration, null, options, request);
      }
      /// <summary>
      /// Organisation-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.UserRegistrationResponse> UserRegistrationAsync(global::DominectClient.UserRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserRegistrationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Organisation-related
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DominectClient.UserRegistrationResponse> UserRegistrationAsync(global::DominectClient.UserRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserRegistration, null, options, request);
      }
      public virtual global::DominectClient.GroupRegistrationResponse GroupRegistration(global::DominectClient.GroupRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupRegistration(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.GroupRegistrationResponse GroupRegistration(global::DominectClient.GroupRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GroupRegistration, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GroupRegistrationResponse> GroupRegistrationAsync(global::DominectClient.GroupRegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GroupRegistrationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GroupRegistrationResponse> GroupRegistrationAsync(global::DominectClient.GroupRegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GroupRegistration, null, options, request);
      }
      public virtual global::DominectClient.SetPseudonymResponse SetGroupPseudonym(global::DominectClient.SetPseudonymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGroupPseudonym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.SetPseudonymResponse SetGroupPseudonym(global::DominectClient.SetPseudonymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetGroupPseudonym, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.SetPseudonymResponse> SetGroupPseudonymAsync(global::DominectClient.SetPseudonymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGroupPseudonymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.SetPseudonymResponse> SetGroupPseudonymAsync(global::DominectClient.SetPseudonymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetGroupPseudonym, null, options, request);
      }
      public virtual global::DominectClient.SetPseudonymResponse SetUserPseudonym(global::DominectClient.SetPseudonymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPseudonym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.SetPseudonymResponse SetUserPseudonym(global::DominectClient.SetPseudonymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUserPseudonym, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.SetPseudonymResponse> SetUserPseudonymAsync(global::DominectClient.SetPseudonymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUserPseudonymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.SetPseudonymResponse> SetUserPseudonymAsync(global::DominectClient.SetPseudonymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUserPseudonym, null, options, request);
      }
      public virtual global::DominectClient.GetUserTokenResponse GetUserToken(global::DominectClient.AuthPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DominectClient.GetUserTokenResponse GetUserToken(global::DominectClient.AuthPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GetUserTokenResponse> GetUserTokenAsync(global::DominectClient.AuthPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DominectClient.GetUserTokenResponse> GetUserTokenAsync(global::DominectClient.AuthPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserToken, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameComClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameComClient(configuration);
      }
    }

  }
}
#endregion
