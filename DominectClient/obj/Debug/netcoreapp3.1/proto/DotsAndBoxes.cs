// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/dots-and-boxes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DominectClient {

  /// <summary>Holder for reflection information generated from proto/dots-and-boxes.proto</summary>
  public static partial class DotsAndBoxesReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/dots-and-boxes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DotsAndBoxesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpwcm90by9kb3RzLWFuZC1ib3hlcy5wcm90bxIDZGFiIlkKDUdhbWVQYXJh",
            "bWV0ZXISIgoabnVtYmVyX29mX3ZlcnRpY2FsX2NvbHVtbnMYASABKA0SJAoc",
            "bnVtYmVyX29mX2hvcml6b250YWxfY29sdW1ucxgCIAEoDSJHCghHYW1lVHVy",
            "bhIQCgh2ZXJ0aWNhbBgBIAEoCBIVCg10YXJnZXRfY29sdW1uGAIgASgNEhIK",
            "CnRhcmdldF9nYXAYAyABKA0icwoJR2FtZVN0YXRlEhgKEHZlcnRpY2FsX2Nv",
            "bHVtbnMYASABKA0SGgoSaG9yaXpvbnRhbF9jb2x1bW5zGAIgASgNEhYKDnZl",
            "cnRpY2FsX2xpbmVzGAMgASgMEhgKEGhvcml6b250YWxfbGluZXMYBCABKAxC",
            "EaoCDkRvbWluZWN0Q2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameParameter), global::DominectClient.GameParameter.Parser, new[]{ "NumberOfVerticalColumns", "NumberOfHorizontalColumns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameTurn), global::DominectClient.GameTurn.Parser, new[]{ "Vertical", "TargetColumn", "TargetGap" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameState), global::DominectClient.GameState.Parser, new[]{ "VerticalColumns", "HorizontalColumns", "VerticalLines", "HorizontalLines" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameParameter : pb::IMessage<GameParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameParameter> _parser = new pb::MessageParser<GameParameter>(() => new GameParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DotsAndBoxesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter(GameParameter other) : this() {
      numberOfVerticalColumns_ = other.numberOfVerticalColumns_;
      numberOfHorizontalColumns_ = other.numberOfHorizontalColumns_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter Clone() {
      return new GameParameter(this);
    }

    /// <summary>Field number for the "number_of_vertical_columns" field.</summary>
    public const int NumberOfVerticalColumnsFieldNumber = 1;
    private uint numberOfVerticalColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfVerticalColumns {
      get { return numberOfVerticalColumns_; }
      set {
        numberOfVerticalColumns_ = value;
      }
    }

    /// <summary>Field number for the "number_of_horizontal_columns" field.</summary>
    public const int NumberOfHorizontalColumnsFieldNumber = 2;
    private uint numberOfHorizontalColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfHorizontalColumns {
      get { return numberOfHorizontalColumns_; }
      set {
        numberOfHorizontalColumns_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfVerticalColumns != other.NumberOfVerticalColumns) return false;
      if (NumberOfHorizontalColumns != other.NumberOfHorizontalColumns) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfVerticalColumns != 0) hash ^= NumberOfVerticalColumns.GetHashCode();
      if (NumberOfHorizontalColumns != 0) hash ^= NumberOfHorizontalColumns.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NumberOfVerticalColumns != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfVerticalColumns);
      }
      if (NumberOfHorizontalColumns != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumberOfHorizontalColumns);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NumberOfVerticalColumns != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfVerticalColumns);
      }
      if (NumberOfHorizontalColumns != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumberOfHorizontalColumns);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfVerticalColumns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfVerticalColumns);
      }
      if (NumberOfHorizontalColumns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfHorizontalColumns);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfVerticalColumns != 0) {
        NumberOfVerticalColumns = other.NumberOfVerticalColumns;
      }
      if (other.NumberOfHorizontalColumns != 0) {
        NumberOfHorizontalColumns = other.NumberOfHorizontalColumns;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfVerticalColumns = input.ReadUInt32();
            break;
          }
          case 16: {
            NumberOfHorizontalColumns = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NumberOfVerticalColumns = input.ReadUInt32();
            break;
          }
          case 16: {
            NumberOfHorizontalColumns = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameTurn : pb::IMessage<GameTurn>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameTurn> _parser = new pb::MessageParser<GameTurn>(() => new GameTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DotsAndBoxesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn(GameTurn other) : this() {
      vertical_ = other.vertical_;
      targetColumn_ = other.targetColumn_;
      targetGap_ = other.targetGap_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn Clone() {
      return new GameTurn(this);
    }

    /// <summary>Field number for the "vertical" field.</summary>
    public const int VerticalFieldNumber = 1;
    private bool vertical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vertical {
      get { return vertical_; }
      set {
        vertical_ = value;
      }
    }

    /// <summary>Field number for the "target_column" field.</summary>
    public const int TargetColumnFieldNumber = 2;
    private uint targetColumn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetColumn {
      get { return targetColumn_; }
      set {
        targetColumn_ = value;
      }
    }

    /// <summary>Field number for the "target_gap" field.</summary>
    public const int TargetGapFieldNumber = 3;
    private uint targetGap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetGap {
      get { return targetGap_; }
      set {
        targetGap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vertical != other.Vertical) return false;
      if (TargetColumn != other.TargetColumn) return false;
      if (TargetGap != other.TargetGap) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vertical != false) hash ^= Vertical.GetHashCode();
      if (TargetColumn != 0) hash ^= TargetColumn.GetHashCode();
      if (TargetGap != 0) hash ^= TargetGap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Vertical != false) {
        output.WriteRawTag(8);
        output.WriteBool(Vertical);
      }
      if (TargetColumn != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetColumn);
      }
      if (TargetGap != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetGap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Vertical != false) {
        output.WriteRawTag(8);
        output.WriteBool(Vertical);
      }
      if (TargetColumn != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetColumn);
      }
      if (TargetGap != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetGap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vertical != false) {
        size += 1 + 1;
      }
      if (TargetColumn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetColumn);
      }
      if (TargetGap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetGap);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTurn other) {
      if (other == null) {
        return;
      }
      if (other.Vertical != false) {
        Vertical = other.Vertical;
      }
      if (other.TargetColumn != 0) {
        TargetColumn = other.TargetColumn;
      }
      if (other.TargetGap != 0) {
        TargetGap = other.TargetGap;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Vertical = input.ReadBool();
            break;
          }
          case 16: {
            TargetColumn = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetGap = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Vertical = input.ReadBool();
            break;
          }
          case 16: {
            TargetColumn = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetGap = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DotsAndBoxesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      verticalColumns_ = other.verticalColumns_;
      horizontalColumns_ = other.horizontalColumns_;
      verticalLines_ = other.verticalLines_;
      horizontalLines_ = other.horizontalLines_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "vertical_columns" field.</summary>
    public const int VerticalColumnsFieldNumber = 1;
    private uint verticalColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VerticalColumns {
      get { return verticalColumns_; }
      set {
        verticalColumns_ = value;
      }
    }

    /// <summary>Field number for the "horizontal_columns" field.</summary>
    public const int HorizontalColumnsFieldNumber = 2;
    private uint horizontalColumns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HorizontalColumns {
      get { return horizontalColumns_; }
      set {
        horizontalColumns_ = value;
      }
    }

    /// <summary>Field number for the "vertical_lines" field.</summary>
    public const int VerticalLinesFieldNumber = 3;
    private pb::ByteString verticalLines_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VerticalLines {
      get { return verticalLines_; }
      set {
        verticalLines_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "horizontal_lines" field.</summary>
    public const int HorizontalLinesFieldNumber = 4;
    private pb::ByteString horizontalLines_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HorizontalLines {
      get { return horizontalLines_; }
      set {
        horizontalLines_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VerticalColumns != other.VerticalColumns) return false;
      if (HorizontalColumns != other.HorizontalColumns) return false;
      if (VerticalLines != other.VerticalLines) return false;
      if (HorizontalLines != other.HorizontalLines) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VerticalColumns != 0) hash ^= VerticalColumns.GetHashCode();
      if (HorizontalColumns != 0) hash ^= HorizontalColumns.GetHashCode();
      if (VerticalLines.Length != 0) hash ^= VerticalLines.GetHashCode();
      if (HorizontalLines.Length != 0) hash ^= HorizontalLines.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VerticalColumns != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VerticalColumns);
      }
      if (HorizontalColumns != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HorizontalColumns);
      }
      if (VerticalLines.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(VerticalLines);
      }
      if (HorizontalLines.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(HorizontalLines);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VerticalColumns != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VerticalColumns);
      }
      if (HorizontalColumns != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HorizontalColumns);
      }
      if (VerticalLines.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(VerticalLines);
      }
      if (HorizontalLines.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(HorizontalLines);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VerticalColumns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VerticalColumns);
      }
      if (HorizontalColumns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HorizontalColumns);
      }
      if (VerticalLines.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VerticalLines);
      }
      if (HorizontalLines.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HorizontalLines);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.VerticalColumns != 0) {
        VerticalColumns = other.VerticalColumns;
      }
      if (other.HorizontalColumns != 0) {
        HorizontalColumns = other.HorizontalColumns;
      }
      if (other.VerticalLines.Length != 0) {
        VerticalLines = other.VerticalLines;
      }
      if (other.HorizontalLines.Length != 0) {
        HorizontalLines = other.HorizontalLines;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VerticalColumns = input.ReadUInt32();
            break;
          }
          case 16: {
            HorizontalColumns = input.ReadUInt32();
            break;
          }
          case 26: {
            VerticalLines = input.ReadBytes();
            break;
          }
          case 34: {
            HorizontalLines = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VerticalColumns = input.ReadUInt32();
            break;
          }
          case 16: {
            HorizontalColumns = input.ReadUInt32();
            break;
          }
          case 26: {
            VerticalLines = input.ReadBytes();
            break;
          }
          case 34: {
            HorizontalLines = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
