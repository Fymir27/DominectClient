// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/dominect.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DominectClient {

  /// <summary>Holder for reflection information generated from proto/dominect.proto</summary>
  public static partial class DominectReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/dominect.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DominectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90by9kb21pbmVjdC5wcm90bxIDZG9tIjoKDUdhbWVQYXJhbWV0ZXIS",
            "EwoLYm9hcmRfd2lkdGgYASABKA0SFAoMYm9hcmRfaGVpZ2h0GAIgASgNIjoK",
            "CEdhbWVUdXJuEgoKAngxGAEgASgNEgoKAnkxGAIgASgNEgoKAngyGAMgASgN",
            "EgoKAnkyGAQgASgNIkoKCUdhbWVTdGF0ZRITCgtib2FyZF93aWR0aBgBIAEo",
            "DRIUCgxib2FyZF9oZWlnaHQYAiABKA0SEgoKYm9hcmRfZGF0YRgDIAEoDEIR",
            "qgIORG9taW5lY3RDbGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameParameter), global::DominectClient.GameParameter.Parser, new[]{ "BoardWidth", "BoardHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameTurn), global::DominectClient.GameTurn.Parser, new[]{ "X1", "Y1", "X2", "Y2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DominectClient.GameState), global::DominectClient.GameState.Parser, new[]{ "BoardWidth", "BoardHeight", "BoardData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The GameParameter packet defines the board of m x n fields (width x height).
  /// </summary>
  public sealed partial class GameParameter : pb::IMessage<GameParameter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameParameter> _parser = new pb::MessageParser<GameParameter>(() => new GameParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DominectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter(GameParameter other) : this() {
      boardWidth_ = other.boardWidth_;
      boardHeight_ = other.boardHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameParameter Clone() {
      return new GameParameter(this);
    }

    /// <summary>Field number for the "board_width" field.</summary>
    public const int BoardWidthFieldNumber = 1;
    private uint boardWidth_;
    /// <summary>
    /// The width defines left and right edges for the first player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoardWidth {
      get { return boardWidth_; }
      set {
        boardWidth_ = value;
      }
    }

    /// <summary>Field number for the "board_height" field.</summary>
    public const int BoardHeightFieldNumber = 2;
    private uint boardHeight_;
    /// <summary>
    /// The height defines top and bottom edges for the second player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoardHeight {
      get { return boardHeight_; }
      set {
        boardHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoardWidth != other.BoardWidth) return false;
      if (BoardHeight != other.BoardHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoardWidth != 0) hash ^= BoardWidth.GetHashCode();
      if (BoardHeight != 0) hash ^= BoardHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BoardWidth != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoardWidth);
      }
      if (BoardHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoardHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BoardWidth != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoardWidth);
      }
      if (BoardHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoardHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoardWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardWidth);
      }
      if (BoardHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameParameter other) {
      if (other == null) {
        return;
      }
      if (other.BoardWidth != 0) {
        BoardWidth = other.BoardWidth;
      }
      if (other.BoardHeight != 0) {
        BoardHeight = other.BoardHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoardWidth = input.ReadUInt32();
            break;
          }
          case 16: {
            BoardHeight = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BoardWidth = input.ReadUInt32();
            break;
          }
          case 16: {
            BoardHeight = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The GameTurn packet defines the two occupied positions of the played domino piece.
  /// These positions should be adjacent (a valid domino piece), otherwise the server will respond with an invalid turn status.
  /// </summary>
  public sealed partial class GameTurn : pb::IMessage<GameTurn>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameTurn> _parser = new pb::MessageParser<GameTurn>(() => new GameTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DominectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn(GameTurn other) : this() {
      x1_ = other.x1_;
      y1_ = other.y1_;
      x2_ = other.x2_;
      y2_ = other.y2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTurn Clone() {
      return new GameTurn(this);
    }

    /// <summary>Field number for the "x1" field.</summary>
    public const int X1FieldNumber = 1;
    private uint x1_;
    /// <summary>
    /// 1. Position, X-axis coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X1 {
      get { return x1_; }
      set {
        x1_ = value;
      }
    }

    /// <summary>Field number for the "y1" field.</summary>
    public const int Y1FieldNumber = 2;
    private uint y1_;
    /// <summary>
    /// 1. Position, Y-axis coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y1 {
      get { return y1_; }
      set {
        y1_ = value;
      }
    }

    /// <summary>Field number for the "x2" field.</summary>
    public const int X2FieldNumber = 3;
    private uint x2_;
    /// <summary>
    /// 2. Position, X-axis coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X2 {
      get { return x2_; }
      set {
        x2_ = value;
      }
    }

    /// <summary>Field number for the "y2" field.</summary>
    public const int Y2FieldNumber = 4;
    private uint y2_;
    /// <summary>
    /// 2. Position, Y-axis coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y2 {
      get { return y2_; }
      set {
        y2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X1 != other.X1) return false;
      if (Y1 != other.Y1) return false;
      if (X2 != other.X2) return false;
      if (Y2 != other.Y2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X1 != 0) hash ^= X1.GetHashCode();
      if (Y1 != 0) hash ^= Y1.GetHashCode();
      if (X2 != 0) hash ^= X2.GetHashCode();
      if (Y2 != 0) hash ^= Y2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X1);
      }
      if (Y1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y1);
      }
      if (X2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(X2);
      }
      if (Y2 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Y2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X1);
      }
      if (Y1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y1);
      }
      if (X2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(X2);
      }
      if (Y2 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Y2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X1);
      }
      if (Y1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y1);
      }
      if (X2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X2);
      }
      if (Y2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTurn other) {
      if (other == null) {
        return;
      }
      if (other.X1 != 0) {
        X1 = other.X1;
      }
      if (other.Y1 != 0) {
        Y1 = other.Y1;
      }
      if (other.X2 != 0) {
        X2 = other.X2;
      }
      if (other.Y2 != 0) {
        Y2 = other.Y2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadUInt32();
            break;
          }
          case 24: {
            X2 = input.ReadUInt32();
            break;
          }
          case 32: {
            Y2 = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadUInt32();
            break;
          }
          case 24: {
            X2 = input.ReadUInt32();
            break;
          }
          case 32: {
            Y2 = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The GameState packet defines the current board state of the match.
  /// </summary>
  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DominectClient.DominectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      boardWidth_ = other.boardWidth_;
      boardHeight_ = other.boardHeight_;
      boardData_ = other.boardData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "board_width" field.</summary>
    public const int BoardWidthFieldNumber = 1;
    private uint boardWidth_;
    /// <summary>
    /// The used board width.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoardWidth {
      get { return boardWidth_; }
      set {
        boardWidth_ = value;
      }
    }

    /// <summary>Field number for the "board_height" field.</summary>
    public const int BoardHeightFieldNumber = 2;
    private uint boardHeight_;
    /// <summary>
    /// The used board height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoardHeight {
      get { return boardHeight_; }
      set {
        boardHeight_ = value;
      }
    }

    /// <summary>Field number for the "board_data" field.</summary>
    public const int BoardDataFieldNumber = 3;
    private pb::ByteString boardData_ = pb::ByteString.Empty;
    /// <summary>
    /// Byte array containing the current board information.
    /// Each byte/character corresponds to a field state.
    /// Ascii '0' ... Field unoccupied.
    /// Ascii '1' ... Field belongs to the first player.
    /// Ascii '2' ... Field belongs to the second player.
    /// The overlying GameState packet defines "beginning_player", which is set to true, if you are the first player.
    /// Fields are ordered row-after-row inside the byte array "board_data".
    /// The first field of "board_data" corresponds to the position (x|y)->(0|0), the second to (x|y)->(1|0).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BoardData {
      get { return boardData_; }
      set {
        boardData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoardWidth != other.BoardWidth) return false;
      if (BoardHeight != other.BoardHeight) return false;
      if (BoardData != other.BoardData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoardWidth != 0) hash ^= BoardWidth.GetHashCode();
      if (BoardHeight != 0) hash ^= BoardHeight.GetHashCode();
      if (BoardData.Length != 0) hash ^= BoardData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BoardWidth != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoardWidth);
      }
      if (BoardHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoardHeight);
      }
      if (BoardData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BoardData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BoardWidth != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoardWidth);
      }
      if (BoardHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoardHeight);
      }
      if (BoardData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BoardData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoardWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardWidth);
      }
      if (BoardHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoardHeight);
      }
      if (BoardData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BoardData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.BoardWidth != 0) {
        BoardWidth = other.BoardWidth;
      }
      if (other.BoardHeight != 0) {
        BoardHeight = other.BoardHeight;
      }
      if (other.BoardData.Length != 0) {
        BoardData = other.BoardData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoardWidth = input.ReadUInt32();
            break;
          }
          case 16: {
            BoardHeight = input.ReadUInt32();
            break;
          }
          case 26: {
            BoardData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BoardWidth = input.ReadUInt32();
            break;
          }
          case 16: {
            BoardHeight = input.ReadUInt32();
            break;
          }
          case 26: {
            BoardData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
